name: Build, Test, Publish, and Tag Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Create and push Git tag
      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch --tags
          
          # Determine the latest tag and calculate the next version
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            next_version="v1.0.0"
          else
            next_version=$(echo $latest_tag | awk -F. '{$NF+=1; OFS="."; print $0}')
          fi
          echo "Next Version: $next_version"

          git tag -a "$next_version" -m "Release $next_version"
          git push origin "$next_version"

  build-and-publish:
    name: Build, Test, and Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-tag
    strategy:
      matrix:
        image:
          - name: rediskage
            path: ./docker/rediskage
          - name: cluster-healer
            path: ./docker/cluster-healer
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Extract SemVer from Git tag
      - name: Extract SemVer
        id: semver
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "SEMVER=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "SEMVER=latest" >> $GITHUB_ENV
          fi
          echo "Extracted SemVer: $SEMVER"

      # Step 3: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 4: Build, Test, and Push Docker Image
      - name: Build and Test Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.image.path }}
          tags: |
            singhpiyushgautam/${{ matrix.image.name }}:${{ env.SEMVER }}
            singhpiyushgautam/${{ matrix.image.name }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.date }}
            VERSION=${{ env.SEMVER }}

