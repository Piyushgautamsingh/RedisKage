name: Build, Test, Publish, and Tag Release
on:
  push:
    branches: ["main"]
  pull_request:
    types: [closed]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
jobs:
  create-tag-and-release:
    name: Create Git Tag and Release
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
      # Step 2: Set up Git configuration
      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch --tags
      # Step 3: Determine the next version and create a tag
      - name: Determine next version and create tag
        id: version
        run: |
          set -x  # Enable debugging
          git describe --abbrev=0 --tags > /dev/null 2>&1 || FAILED=true
          if [ "${FAILED}" = true ]; then
            SEMVER_VERSION_ARGS="--first-release"
          elif [ "$(printf "$(git describe --abbrev=0 --tags)" | awk -F[v.] '{print $2}')" = "0" ] && [ "$GITHUB_REF_NAME" == "${{ github.event.repository.default_branch }}" ]; then
            SEMVER_VERSION_ARGS="--release-as 1.0.0"
          fi
          npx standard-version ${SEMVER_VERSION_ARGS}
          SEMVER_TAG=$(git describe --tags --abbrev=0)
          echo "Next Tag: $SEMVER_TAG"
          echo "SEMVER_TAG=$SEMVER_TAG" >> $GITHUB_ENV
      # Step 4: Create a GitHub release
      - name: Create GitHub release
        run: |
          if [ -f CHANGELOG.md ]; then
            gh release create "$SEMVER_TAG" --notes-file CHANGELOG.md --target "$GITHUB_SHA"
          else
            gh release create "$SEMVER_TAG" --target "$GITHUB_SHA"
          fi
  build-and-publish:
    name: Build, Test, and Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-tag-and-release
    strategy:
      matrix:
        image:
          - name: rediskage
            path: ./docker/rediskage
          - name: redis-cluster-healer
            path: ./docker/redis-cluster-healer
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
      # Step 2: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}
      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          platforms: linux/amd64,linux/arm64
      # Step 4: Build, Test, and Push Docker Image for multiple platforms
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.image.path }}
          platforms: linux/amd64,linux/arm64
          tags: |
            singhpiyushgautam/${{ matrix.image.name }}:${{ env.SEMVER_TAG }}
            singhpiyushgautam/${{ matrix.image.name }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |-
            BUILD_DATE=${{ steps.date.outputs.date }}
            VERSION=${{ env.SEMVER_TAG }}
